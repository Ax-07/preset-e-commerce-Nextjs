//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

// @/prisma/base.prisma
// This file contains the Prisma schema for the database.
// To import models, use the following command:
// npx prisma-merge --input prisma/models --output prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output = "./generated/prisma/client"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// @/prisma/models/auth.prisma
// This file contains the models for authentication using NextAuth.
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// --- SCHÉMA PRISMA COMMENTÉ POUR LA GESTION DU PANIER (CART) ---

model Cart {
  id         String     @id @default(uuid())                 // Clé primaire : identifiant unique du panier
  userId     String?    @unique                              // FK vers User.id (utilisateur)
  user       User?      @relation("UserCarts", fields: [userId], references: [id])  // Propriétaire du panier
  items      CartItem[]                                      // Éléments du panier
  couponCode String?                                       // Code promo appliqué (optionnel)
  total      Float                                             // Montant total
  updatedAt  DateTime   @updatedAt                         // Date de dernière mise à jour
  createdAt  DateTime   @default(now())                    // Date de création

  @@map("carts")                                           // Table SQL "carts"
  @@index([userId], name: "idx_cart_userId")               // Index sur userId
  @@index([updatedAt], name: "idx_cart_updatedAt")         // Index sur updatedAt
  @@index([couponCode], name: "idx_cart_couponCode")       // Index sur couponCode
  @@index([createdAt], name: "idx_cart_createdAt")         // Index sur createdAt
}

model CartItem {
  id        String  @id @default(uuid())                   // Clé primaire : identifiant unique de l'élément
  cartId    String                                          // FK vers Cart.id
  cart      Cart    @relation(fields: [cartId], references: [id])  // Panier associé
  productId String                                          // Identifiant du produit
  variantId String?                                         // Identifiant de la variante (optionnel)
  name      String                                          // Nom du produit
  quantity  Int                                             // Quantité commandée
  price     Float                                           // Prix unitaire
  image     String?                                         // URL de l'image du produit

  @@map("cart_items")                                     // Table SQL "cart_items"
  @@index([cartId], name: "idx_cart_item_cartId")         // Index sur cartId
  @@index([productId], name: "idx_cart_item_productId")   // Index sur productId
  @@index([variantId], name: "idx_cart_item_variantId")   // Index sur variantId
  @@index([quantity], name: "idx_cart_item_quantity")     // Index sur quantity
}


// --- SCHÉMA PRISMA COMMENTÉ POUR LES CODES PROMOTIONNELS ---

model Coupon {
  id                 String   @id @default(uuid())          // Clé primaire : UUID généré automatiquement
  code               String   @unique                     // Code unique du coupon utilisé lors de l’achat
  description        String?                              // Description du coupon (optionnel)
  discountPercentage Float?                               // Pourcentage de remise appliquée (optionnel)
  discountAmount     Float?                               // Montant fixe de remise (optionnel)
  startDate          DateTime                             // Date (inclusive) de début de validité
  endDate            DateTime                             // Date (inclusive) de fin de validité
  isActive           Boolean  @default(true)              // Indicateur si le coupon est actif ou désactivé
  usageLimit         Int?                                 // Nombre maximal d’utilisations (null = illimité)
  createdAt          DateTime @default(now())             // Date de création du coupon
  updatedAt          DateTime @updatedAt                  // Date de dernière mise à jour

  @@map("coupons")                                        // Mappe ce modèle à la table SQL “coupons”
  @@index([code], name: "idx_coupon_code")               // Index pour accélérer les recherches par code
  @@index([isActive], name: "idx_coupon_active")         // Index sur le statut actif/inactif
  @@index([startDate], name: "idx_coupon_startDate")     // Index sur la date de début
  @@index([endDate], name: "idx_coupon_endDate")         // Index sur la date de fin
}


// ------------------ Orders & Payments ------------------

model Order {                                                   // Modèle représentant une commande
  id            String        @id @default(uuid())             // Clé primaire : UUID
  userId        String                                         // FK vers User.id (client qui a passé la commande)
  user          User          @relation("UserOrders", fields: [userId], references: [id]) // Relation vers le client authentifié
  customerId    String?                                        // FK optionnelle vers Customer.id (profil client détaillé)
  customer      Customer?     @relation("OrdersForCustomer", fields: [customerId], references: [id]) // Relation vers le profil client
  items         OrderItem[]                                    // Liste des articles de la commande

  totalAmount   Float                                          // Montant total TTC
  subtotal      Float                                          // Sous-total HT
  taxAmount     Float                                          // Montant des taxes
  shippingCost  Float                                          // Frais de livraison
  discount      Float?                                         // Remise appliquée (optionnel)
  status        OrderStatus                                   // Statut de la commande (enum)

  paymentId     String        @unique                          // FK unique vers Payment.id (one-to-one)
  payment       Payment       @relation("OrderPayment", fields: [paymentId], references: [id]) // Détails du paiement

  shippingId    String        @unique                          // FK unique vers ShippingInfo.id (one-to-one)
  shipping      ShippingInfo  @relation("OrderShipping", fields: [shippingId], references: [id]) // Détails de la livraison

  billingId     String        @unique                          // FK unique vers BillingInfo.id (one-to-one)
  billing       BillingInfo   @relation("OrderBilling", fields: [billingId], references: [id]) // Détails de la facturation

  history       OrderEvent[]                                    // Historique des événements de la commande
  invoiceUrl    String?                                        // URL de la facture PDF (optionnel)
  internalNote  String?                                        // Note interne admin (optionnel)
  tags          OrderTag[]                                     // Étiquettes personnalisées
  createdAt     DateTime      @default(now())                  // Date de création
  updatedAt     DateTime      @updatedAt                       // Date de mise à jour
  cancelledAt   DateTime?                                      // Date d'annulation (optionnel)
  refundedAt    DateTime?                                      // Date de remboursement (optionnel)

  @@map("orders")                                          // Table SQL "orders"
  @@index([userId], name: "idx_order_userId")              // Index sur userId
  @@index([paymentId], name: "idx_order_paymentId")        // Index sur paymentId
  @@index([shippingId], name: "idx_order_shippingId")      // Index sur shippingId
}

model OrderItem {                                               // Modèle représentant un article dans une commande
  id             String        @id @default(uuid())           // Clé primaire : UUID
  orderId        String                                        // FK vers Order.id
  order          Order         @relation(fields: [orderId], references: [id]) // Relation vers la commande
  productId      String                                        // Identifiant du produit
  productName    String                                        // Nom du produit au moment de l'achat
  sku            String                                        // SKU / référence produit
  quantity       Int                                           // Quantité commandée
  unitPrice      Float                                         // Prix unitaire
  totalPrice     Float                                         // Prix total (unitPrice * quantity)
  variantOptions String[]                                      // Options de variante (ex: ["Taille: M", "Couleur: Rouge"])
  refundStatus   RefundStatus  @default(none)                  // Statut remboursement (enum)
  returnEligible Boolean?      @default(true)                  // Éligibilité au retour

  @@map("order_items")                                     // Table SQL "order_items"
  @@index([orderId], name: "idx_orderitem_orderId")       // Index sur orderId
  @@index([productId], name: "idx_orderitem_productId")   // Index sur productId
}

enum RefundStatus {                                            // Enum pour le statut de remboursement
  none                                                           // Aucun remboursement
  requested                                                      // Remboursement demandé
  refunded                                                       // Remboursé
}

enum OrderStatus {                                             // Enum pour la progression de la commande
  pending                                                         // En attente
  paid                                                            // Payée
  processing                                                      // En cours de traitement
  shipped                                                         // Expédiée
  delivered                                                       // Livrée
  cancelled                                                       // Annulée
  refunded                                                        // Remboursée
  return_requested                                                // Retour demandé
  return_approved                                                 // Retour approuvé
}

model Payment {                                                 // Modèle des informations de paiement
  id             String        @id @default(uuid())           // Clé primaire : UUID
  method         String                                        // Méthode (ex: Stripe, PayPal)
  transactionId  String?                                       // ID de transaction externe
  status         PaymentStatus                                // Statut du paiement (enum)
  paidAt         DateTime?                                     // Date de paiement
  refundedAmount Float?                                        // Montant remboursé (optionnel)

  order          Order?        @relation("OrderPayment")     // Relation inverse vers Order

  @@map("payments")                                       // Table SQL "payments"
  @@index([transactionId], name: "idx_payment_transactionId") // Index sur transactionId
}

enum PaymentStatus {                                          // Enum des statuts de paiement
  paid                                                           // Payé
  pending                                                        // En attente
  failed                                                         // Échoué
  refunded                                                       // Remboursé
}

model ShippingInfo {                                           // Modèle des informations de livraison
  id                String          @id @default(uuid())    // Clé primaire : UUID
  method            String                                  // Transporteur ou point relais
  trackingNumber    String?                                 // Numéro de suivi
  status            ShippingStatus                          // Statut livraison (enum)
  shippedAt         DateTime?                                // Date d'expédition
  deliveredAt       DateTime?                                // Date de livraison
  estimatedDelivery DateTime?                                // Date estimée
  addressId         String          @unique                        // FK vers Address.id
  address           Address         @relation("UserShippingInfo", fields: [addressId], references: [id]) // Adresse de livraison
  order             Order?          @relation("OrderShipping") // Relation inverse vers Order

  @@map("shipping_infos")                               // Table SQL "shipping_infos"
  @@index([addressId], name: "idx_shippinginfo_addressId") // Index sur addressId
}

enum ShippingStatus {                                         // Enum des statuts de livraison
  pending                                                        // En attente
  shipped                                                        // Expédiée
  delivered                                                      // Livrée
  returned                                                       // Retournée
}

model BillingInfo {                                            // Modèle des informations de facturation
  id                String          @id @default(uuid())    // Clé primaire : UUID
  method            String                                  // Méthode de facturation (ex: Stripe, PayPal)
  transactionId     String?                                 // ID de transaction externe
  status            BillingStatus                            // Statut de facturation (enum)
  billedAt          DateTime?                                // Date de facturation
  amount            Float                                   // Montant facturé
  addressId         String          @unique                        // FK vers Address.id
  address           Address         @relation("UserBillingInfo", fields: [addressId], references: [id]) // Adresse de facturation
  order             Order?          @relation("OrderBilling") // Relation inverse vers Order

  @@map("billing_infos")                                // Table SQL "billing_infos"
  @@index([transactionId], name: "idx_billinginfo_transactionId") // Index sur transactionId
}

enum BillingStatus {                                          // Enum des statuts de facturation
  pending                                                        // En attente
  paid                                                           // Payée
  failed                                                         // Échouée
}

model OrderEvent {                                             // Historique des événements d'une commande
  id         String      @id @default(uuid())                 // Clé primaire : UUID
  orderId    String                                            // FK vers Order.id
  order      Order       @relation(fields: [orderId], references: [id]) // Commande liée
  status     OrderStatus                                   // Statut enregistré
  note       String?                                         // Note descriptive (optionnel)
  updatedBy  String?                                        // Utilisateur ou système ayant effectué la mise à jour
  timestamp  DateTime    @default(now())                     // Date de l'événement

  @@map("order_events")                                // Table SQL "order_events"
  @@index([orderId], name: "idx_orderevent_orderId") // Index sur orderId
}

model RefundRequest {                                         // Demandes de remboursement
  id             String      @id @default(uuid())           // Clé primaire : UUID
  orderId        String                                        // FK vers Order.id
  reason         String                                        // Motif du remboursement
  status         RefundRequestStatus                           // Statut (enum)
  requestedAt    DateTime                                      // Date de la requête
  processedAt    DateTime?                                     // Date de traitement (optionnel)
  refundedAmount Float?                                        // Montant remboursé (optionnel)
  processedBy    String?                                       // Utilisateur ayant traité

  @@map("refund_requests")                             // Table SQL "refund_requests"
  @@index([orderId], name: "idx_refundrequest_orderId") // Index sur orderId
}

enum RefundRequestStatus {                              // Enum des statuts de refund request
  pending                                                        // En attente
  approved                                                       // Approuvé
  rejected                                                       // Rejeté
  refunded                                                       // Remboursé
}

model ReturnLog {                                            // Logs de retour de produits
  id                String   @id @default(uuid())          // Clé primaire : UUID
  orderId           String                                     // FK vers Order.id
  items             String[]                                  // Liste des SKUs retournés
  reason            String                                    // Motif du retour
  returnStatus      ReturnStatus                              // Statut (enum)
  returnRequestedAt DateTime                                 // Date de la requête
  returnReceivedAt  DateTime?                                // Date de réception (optionnel)
  processedBy       String?                                   // Utilisateur ayant traité

  @@map("return_logs")                                 // Table SQL "return_logs"
  @@index([orderId], name: "idx_returnlog_orderId")  // Index sur orderId
}

enum ReturnStatus {                                       // Enum des statuts de retour
  pending                                                        // En attente
  received                                                       // Reçu
  rejected                                                       // Rejeté
}

model InternalNote {                                        // Notes internes sur une commande
  id         String   @id @default(uuid())                 // Clé primaire : UUID
  orderId    String                                        // FK vers Order.id
  note       String                                        // Contenu de la note
  createdAt  DateTime @default(now())                      // Date de création
  createdBy  String                                        // Utilisateur ayant créé

  @@map("internal_notes")                           // Table SQL "internal_notes"
  @@index([orderId], name: "idx_internalnote_orderId")   // Index sur orderId
}

model OrderTag {                                           // Étiquettes personnalisées pour commandes
  id         String   @id @default(uuid())                // Clé primaire : UUID
  orderId    String                                        // FK vers Order.id
  tag        String                                        // Valeur de l'étiquette
  order      Order    @relation(fields: [orderId], references: [id]) // Commande liée
  createdAt  DateTime @default(now())                      // Date de création
  createdBy  String                                        // Utilisateur ayant créé

  @@map("order_tags")                                // Table SQL "order_tags"
  @@index([orderId], name: "idx_ordertag_orderId") // Index sur orderId
  @@index([tag], name: "idx_ordertag_tag")         // Index sur le tag
}


// ------------------ Products & Categories ------------------

model Product {                                                      // Modèle représentant un produit
  id            String           @id @default(uuid())            // Clé primaire : UUID
  name          String                                      // Nom du produit
  description   String                                      // Description détaillée
  price         Float?                                     // Prix unitaire (optionnel)
  categoryId    String?                                    // FK vers ProductCategory.id (optionnel)
  category      ProductCategory? @relation(fields: [categoryId], references: [id]) // Catégorie associée
  options       Option[]                                   // Variantes/options du produit
  media         Media[]                                    // Médias associés (images, vidéos)
  promotion     Promotion?                                 // Promotion en cours (optionnel)
  attributes    Json?                                      // Attributs libres (tags, dimensions…)
  stock         Stock?           @relation("ProductStock")   // Stock disponible (relation 1:1)
  reviews       Review[]                                   // Avis clients
  createdAt     DateTime         @default(now())              // Date de création
  updatedAt     DateTime         @updatedAt                   // Date de dernière mise à jour

  @@map("products")                                         // Table SQL "products"
  @@index([categoryId], name: "idx_product_categoryId")    // Index sur la catégorie
  @@index([name], name: "idx_product_name")               // Index sur le nom
}

model ProductCategory {                                              // Modèle de catégorie produit
  id               String             @id @default(uuid())       // Clé primaire : UUID
  name             String                                   // Nom de la catégorie
  description      String?                                  // Description (optionnelle)
  parentCategoryId String?                                   // FK vers catégorie parente (self-relation)
  parentCategory   ProductCategory?   @relation("Subcategories", fields: [parentCategoryId], references: [id]) // Catégorie parente
  subcategories    ProductCategory[]  @relation("Subcategories") // Sous-catégories
  products         Product[]                                 // Produits rattachés
  createdAt        DateTime           @default(now())         // Date de création
  updatedAt        DateTime           @updatedAt              // Date de mise à jour

  @@map("product_categories")                               // Table SQL "product_categories"
  @@index([parentCategoryId], name: "idx_category_parentId")// Index sur la catégorie parente
  @@index([name], name: "idx_category_name")               // Index sur le nom
}

model Option {                                          // Modèle option (ex: taille, couleur)
  id         String        @id @default(uuid())       // Clé primaire : UUID
  name       String                                // Nom de l'option
  productId  String                                // FK vers Product.id
  product    Product       @relation(fields: [productId], references: [id]) // Produit parent
  values     OptionValue[]                         // Valeurs possibles

  @@map("options")                               // Table SQL "options"
  @@index([productId], name: "idx_option_productId") // Index sur productId
  @@index([name], name: "idx_option_name")           // Index sur le nom de l'option
}

model OptionValue {                                       // Valeur d'une option (ex: "M", "Rouge")
  id            String       @id @default(uuid())    // Clé primaire : UUID
  name          String                              // Libellé de la valeur
  quantity      Int?                                // Quantité en stock pour cette valeur
  unit          String?                             // Unité de mesure (ex: g, ml)
  unitPrice     Float?                              // Prix unitaire par unité
  totalPrice    Float?                              // Prix total pour cette valeur
  priceModifier Float?                              // Écart de prix relatif au produit de base
  isDefault     Boolean?     @default(false)         // Valeur par défaut
  optionId      String                              // FK vers Option.id
  option        Option       @relation(fields: [optionId], references: [id]) // Option parente
  stockId       String?      @unique                 // FK unique vers Stock.id (one-to-one)
  stock         Stock?       @relation("OptionValueStock", fields: [stockId], references: [id]) // Stock spécifique

  @@map("option_values")                         // Table SQL "option_values"
}

model Media {                                         // Modèle média (image, vidéo, audio)
  id         String   @id @default(uuid())          // Clé primaire : UUID
  productId  String                                 // FK vers Product.id
  product    Product  @relation(fields: [productId], references: [id]) // Produit associé
  url        String                                 // URL publique
  type       MediaType                              // Type de média (enum)
  alt        String?                                // Texte alternatif pour accessibilité
  thumbnail  String?                                // URL de la miniature
  isPrimary  Boolean? @default(false)               // Média principal

  @@map("media")                                 // Table SQL "media"
  @@index([productId], name: "idx_media_productId") // Index sur productId
  @@index([type], name: "idx_media_type")          // Index sur le type
}

enum MediaType {                                    // Enum pour les types de média
  image                                               // Image
  video                                               // Vidéo
  audio                                               // Audio
}

model Stock {                                        // Modèle de stock produit
  id            String   @id @default(uuid())       // Clé primaire : UUID
  productId     String?  @unique                   // FK unique vers Product.id (one-to-one)
  product       Product? @relation("ProductStock", fields: [productId], references: [id]) // Produit lié
  quantity      Int                                   // Quantité actuelle en stock
  min           Int?                                  // Seuil minimum de réapprovisionnement
  max           Int?                                  // Seuil maximum souhaité
  location      String?                               // Emplacement (ex: entrepôt #, rayon)
  optionValue   OptionValue? @relation("OptionValueStock") // Stock pour variante spécifique

  @@map("stocks")                               // Table SQL "stocks"
  @@index([productId], name: "idx_stock_productId") // Index sur productId
  @@index([quantity], name: "idx_stock_quantity")   // Index sur la quantité
}

model Promotion {                                    // Modèle promotion (réductions temporaires)
  id                 String   @id @default(uuid())  // Clé primaire : UUID
  productId          String   @unique               // FK unique vers Product.id (one-to-one)
  product            Product  @relation(fields: [productId], references: [id]) // Produit concerné
  isOnSale           Boolean? @default(false)       // Indicateur de promotion active
  discountPercentage Float?                        // Pourcentage de réduction
  discountAmount     Float?                        // Montant fixe de réduction
  salePrice          Float?                        // Prix promotionnel
  saleStartDate      DateTime?                     // Début de la promo
  saleEndDate        DateTime?                     // Fin de la promo

  @@map("promotions")                           // Table SQL "promotions"
  @@index([productId], name: "idx_promotion_productId") // Index sur productId
  @@index([isOnSale], name: "idx_promotion_isOnSale")   // Index sur statut
}

model Review {                                      // Modèle avis client
  id                 String   @id @default(uuid())  // Clé primaire : UUID
  productId          String                         // FK vers Product.id
  product            Product  @relation(fields: [productId], references: [id]) // Produit évalué
  userId             String                         // FK vers User.id
  user               User     @relation("UserReviews", fields: [userId], references: [id]) // Auteur de l'avis
  rating             Int                            // Note (1–5)
  comment            String?                        // Commentaire texte
  isVerifiedPurchase Boolean? @default(false)        // Avis d'achat vérifié
  createdAt          DateTime @default(now())        // Date de création

  @@map("reviews")                              // Table SQL "reviews"
  @@index([productId], name: "idx_review_productId") // Index sur productId
  @@index([userId], name: "idx_review_userId")       // Index sur userId
}

// --- MODÈLE PRISMA POUR LA WISHLIST ---

model Wishlist {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation("UserWishlists", fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("wishlists")
  @@index([userId], name: "idx_wishlist_userId")
}

model WishlistItem {
  id          String     @id @default(uuid())
  wishlistId  String                                  // FK vers Wishlist.id
  wishlist    Wishlist  @relation(fields: [wishlistId], references: [id])
  productId   String                                  // Identifiant du produit
  variantId   String?                                 // Identifiant de variante (optionnel)
  quantity    Int       @default(1)                   // Nombre souhaité de ce produit
  createdAt   DateTime  @default(now())

  @@map("wishlist_items")
  @@index([wishlistId], name: "idx_wishlistitem_wishlistId")
  @@index([productId], name: "idx_wishlistitem_productId")
  @@unique([wishlistId, productId, variantId], name: "uq_wishlistitem_product_variant")
}


// -- SCHÉMA PRISMA COMMENTÉ POUR LA GESTION DES UTILISATEURS --

model User {
  id               String         @id @default(cuid())                // Clé primaire : identifiant unique généré via cuid()
  name             String?                                            // Nom complet de l'utilisateur (optionnel)
  email            String?        @unique                             // Email de l'utilisateur, doit être unique
  password         String?                                            // Mot de passe hashé (optionnel, pour authentification interne)
  emailVerified    DateTime?      @map("email_verified")              // Date de vérification de l'email, colonne SQL "email_verified"
  image            String?                                            // URL de l'avatar ou photo de profil (optionnel)
  stripeCustomerId String?        @map("stripe_customer_id")          // Identifiant du client Stripe (optionnel), colonne SQL "stripe_customer_id"

  accounts         Account[]                                          // Relation 1:N avec le modèle Account (NextAuth)
  sessions         Session[]                                          // Relation 1:N avec le modèle Session (NextAuth)
  addresses        Address[]                                          // Relation 1:N vers les adresses enregistrées (livraison/facturation)
  orders           Order[]        @relation("UserOrders")             // Commandes passées par l'utilisateur (relation nommée)
  carts            Cart[]         @relation("UserCarts")              // Paniers (historique ou en cours) de l'utilisateur
  reviews          Review[]       @relation("UserReviews")            // Avis déposés par l'utilisateur
  wishlists      Wishlist[]        @relation("UserWishlists")         // Listes de souhaits de l'utilisateur
  notifications  Notification[]    @relation("UserNotifications")     // Notifications reçues par l'utilisateur

  resetToken       String?                                            // Token de réinitialisation de mot de passe (optionnel)
  resetTokenExpiry DateTime?                                          // Date d'expiration du resetToken (optionnel)

  isActive         Boolean        @default(true)                      // Indique si le compte est actif ou suspendu
  isVerified       Boolean        @default(false)                     // Indique si l'adresse e-mail est vérifiée
  isVIP            Boolean        @default(false)                     // Statut VIP (clients privilégiés)
  marketingOptIn   Boolean        @default(false)                     // Consentement aux emails marketing
  roles            UserRole[]                                         // Rôles attribués à l'utilisateur (admin, support...)
  activityLogs     UserActivity[]                                     // Logs d'activité (audit et suivi)
  totalOrders      Int            @default(0)                         // Nombre total de commandes passées
  totalSpent       Float          @default(0)                         // Montant total dépensé
  tags             String[]                                           // Étiquettes personnalisées (ex: "VIP", "fraude")
  internalNotes    String?                                            // Notes internes (commentaires des admins)
  lastLoginAt      DateTime?                                          // Date et heure de la dernière connexion

  @@map("users")                                                      // Nom de la table SQL : "users"
  @@index([email], name: "idx_user_email")                            // Index sur le champ email
  @@index([isActive], name: "idx_user_active")                        // Index sur le statut actif
  @@index([isVerified], name: "idx_user_verified")                    // Index sur le statut vérifié
  @@index([totalSpent], name: "idx_user_total_spent")                 // Index sur le montant total dépensé
  @@index([lastLoginAt], name: "idx_user_last_login")                 // Index sur la date de dernière connexion
}

model UserRole {
  id              String          @id @default(uuid())                                // Clé primaire : UUID généré
  user            User            @relation(fields: [userId], references: [id])       // Relation vers l'utilisateur
  userId          String                                                       // FK vers User.id
  role            Role                                                         // Valeur de rôle (enum)

  @@map("user_roles")                                                 // Table SQL "user_roles"
  @@index([userId], name: "idx_user_role_userId")                     // Index sur userId
  @@index([role], name: "idx_user_role")                              // Index sur le rôle
}

enum Role {                                                  
  customer                                                            // Client classique
  admin                                                               // Administrateur
  manager                                                             // Manager
  support                                                             // Support client
}

model Address {
  id              String         @id @default(uuid())                   // Clé primaire : UUID
  user            User           @relation(fields: [userId], references: [id])      // Propriétaire de l'adresse
  userId          String                                                // FK vers User.id
  fullName        String                                                // Nom complet pour la livraison
  street          String                                                // Adresse (rue et numéro)
  city            String                                                // Ville
  postalCode      String                                                // Code postal
  country         String                                                // Pays
  phone           String?                                               // Téléphone de contact (optionnel)
  isDefault       Boolean        @default(false)                        // Indique si c'est l'adresse par défaut
  shippingInfo    ShippingInfo?  @relation("UserShippingInfo")          // Relation 1:1 vers infos de livraison
  billingInfo     BillingInfo?   @relation("UserBillingInfo")           // Relation 1:1 vers infos de facturation
  customerId      String?    
  customer      Customer?     @relation(fields: [customerId], references: [id]) // Relation vers le client (optionnel)                                           
  @@map("user_addresses")                                             // Table SQL "user_addresses"
}

model UserActivity {
  id        String   @id @default(uuid())                             // Clé primaire : UUID
  user      User     @relation(fields: [userId], references: [id])    // Utilisateur concerné
  userId    String                                                    // FK vers User.id
  activity  String                                                    // Description de l'activité (ex: "login", "update_profile")
  timestamp DateTime @default(now())                                  // Date et heure de l'activité
  ipAddress String?                                                   // Adresse IP (optionnel)

  @@map("user_activities")                                            // Table SQL "user_activities"
}

model Customer {                                                      // Variante profil client
  id         String   @id @default(uuid())                            // Clé primaire : UUID
  firstName  String                                                   // Prénom du client
  lastName   String                                                   // Nom de famille
  email      String?  @unique                                         // Email du profil (optionnel et unique)
  phone      String?                                                  // Téléphone du client
  addresses  Address[]                                                // Adresses liées au client
  orders     Order[]  @relation("OrdersForCustomer")                  // Commandes passées (relation nommée)

  @@map("customers")                                                  // Table SQL "customers"
}

enum NotificationType {
  order_update
  promotion
  wishlist_reminder
  system
  custom
}

model Notification {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation("UserNotifications", fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String?
  url         String?
  metadata    Json?
  isRead      Boolean           @default(false)
  sentAt      DateTime          @default(now())
  readAt      DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("notifications")
  @@index([userId], name: "idx_notification_userId")
  @@index([type], name: "idx_notification_type")
  @@index([isRead], name: "idx_notification_isRead")
}